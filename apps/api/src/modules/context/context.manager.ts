// Utilities
import { ClsServiceManager } from "nestjs-cls";
// Types
import type { AppContext } from "@root/modules/context/context.type";

/**
 * Retrieves the primary payload object from the context.
 * @template T - The type of data payload expected.
 */
export function getPayload<T = any>() {
  const cls = ClsServiceManager.getClsService<AppContext<T>>();

  return cls.get("payload");
}
/**
 * Retrieves the current 'requestId' from the metadata, typically used
 * in distributed tracing.
 */
export function getTraceId() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("requestId");
}

/**
 * Retrieves device information stored under 'device'.
 */
export function getDevice() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("device");
}

/**
 * Retrieves device information stored under 'device'.
 */
export function getUserAgent() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  const device = cls.get("device");

  return device.userAgent;
}

/**
 * Fingerprint is a unique identifier for the device that is used to identify
 * the device in the future. It is generated by the device itself and sent
 * to the server.
 */
export function getFingerprint() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("fingerprint");
}

/**
 * Retrieves the IP address from 'ip', typically
 * set by the server or upstream proxy.
 */
export function getIp() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("ip");
}

/**
 * Retrieves the Cloudflare-forwarded IP from 'ipCf'.
 */
export function getIpCf() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("ipCf");
}

/**
 * Retrieves the login IP from 'loginIp', indicating
 * the IP used when the user initially authenticated.
 */
export function getLoginIp() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("loginIp");
}

/**
 * Retrieves the Cloudflare-forwarded login IP from 'loginIpCf'.
 */
export function getLoginIpCf() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("loginIpCf");
}

/**
 * Retrieves the 'HTTP Request' object from 'httpRequest'.
 * Contains HTTP request details.
 */
export function getHttpRequest() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return cls.get("http");
}

/**
 * Sets a value in the context
 */
export function setContext<K extends keyof AppContext>(key: K, value: AppContext[K]) {
  const cls = ClsServiceManager.getClsService<AppContext>();
  cls.set(key, value);
}

/**
 * Retrieves the IP address from 'ipAddress' field
 */
export function getIpAddress() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("ipAddress");
}

/**
 * Retrieves the user agent from 'userAgent' field
 */
export function getUserAgentString() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("userAgent");
}

/**
 * Retrieves the origin from 'origin' field
 */
export function getOrigin() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("origin");
}

/**
 * Retrieves the referer from 'referer' field
 */
export function getReferer() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("referer");
}

/**
 * Retrieves the endpoint from 'endpoint' field
 */
export function getEndpoint() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("endpoint");
}

/**
 * Retrieves the HTTPS status from 'isHttps' field
 */
export function getIsHttps() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("isHttps");
}

/**
 * Retrieves the request timestamp from 'timestamp' field
 */
export function getTimestamp() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  return cls.get("timestamp");
}

/**
 * Retrieves the request method from 'http.method'
 */
export function getRequestMethod() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  const http = cls.get("http");
  return http?.method;
}

/**
 * Retrieves all request headers from 'http.headers'
 */
export function getRequestHeaders() {
  const cls = ClsServiceManager.getClsService<AppContext>();
  const http = cls.get("http");
  return http?.headers;
}

/**
 * Builds comprehensive request context from current context
 */
export function buildRequestContext() {
  const cls = ClsServiceManager.getClsService<AppContext>();

  return {
    ipAddress: cls.get("ip") || "unknown",
    userAgent: cls.get("userAgent") || "unknown",
    origin: cls.get("origin") || "",
    referer: cls.get("referer") || "",
    method: cls.get("http")?.method || "GET",
    endpoint: cls.get("endpoint") || cls.get("http")?.path || "",
    isHttps: cls.get("isHttps") || false,
    headers: cls.get("http")?.headers || {},
    timestamp: cls.get("timestamp") || new Date().toISOString(),
  };
}
