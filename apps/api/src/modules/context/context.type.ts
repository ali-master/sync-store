// Types
import type { Dictionary, getRequestDeviceInfo } from "@usex/utils";
import type { ClsStore } from "nestjs-cls/dist/src/lib/cls.options";
import type { RecursiveKeyOf } from "nestjs-cls/dist/src/types/recursive-key-of.type";

export interface AppContext<P = any> extends ClsStore {
  readonly payload: P;

  readonly instanceId: string;
  readonly userId: string;
  readonly apiKey: string;

  readonly http: {
    readonly method: string;
    readonly url: string;
    readonly path: string;
    readonly host: string;
    readonly body: any;
    readonly query: string;
    readonly headers: Dictionary<string, string>;
    readonly referrer: string | null;
    readonly utm: {
      readonly source: string | null;
      readonly medium: string | null;
      readonly campaign: string | null;
      readonly content: string | null;
      readonly term: string | null;
    };
  };
  readonly device: ReturnType<typeof getRequestDeviceInfo>;

  /**
   * Fingerprint is a unique identifier for the device that is used to identify the device in the future
   * It is generated by the device itself and sent to the server
   */
  readonly fingerprint: string;
  readonly ip: string;
  readonly ipCf: string;
  readonly loginIp?: string;
  readonly loginIpCf?: string;

  readonly requestId: string;

  // Request context fields
  readonly ipAddress: string;
  readonly userAgent: string;
  readonly origin?: string;
  readonly referer?: string;
  readonly endpoint: string;
  readonly isHttps: boolean;
  readonly timestamp: string;
}

export type ContextStorage<T = any> = RecursiveKeyOf<AppContext<T>>;
